// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------;
/* eslint-disable */
import { Component, EventEmitter, Inject, Input, LOCALE_ID, OnInit, OnDestroy, Optional, Output, TemplateRef } from '@angular/core';
import { FormGroup } from '@angular/forms';
import { FormlyFieldConfig } from '@ngx-formly/core';
import { IFieldExpressionDictionary, IFieldPropertyExpressionDictionary, SelectConfiguration, ENTRY_FIELD_TYPE_RESOLVER, FieldTypeResolver, sortOptions } from '@enigmatry/entry-form';
import { BehaviorSubject, of, Subject, Subscription } from 'rxjs';
import { map, throttleTime } from 'rxjs/operators';

type IGetProductDetailsResponse = {};

@Component({
  selector: 'app-g-product-edit',
  templateUrl: './product-edit-generated.component.html'
})
export class ProductEditGeneratedComponent implements OnInit, OnDestroy {

  @Input() model: IGetProductDetailsResponse = {} as IGetProductDetailsResponse;
  @Input() set isReadonly(value: boolean) {
    this._isReadonly = value;
    this.fields = this.initializeFields();
  }
  get isReadonly() {
    return this._isReadonly;
  }

  @Input() saveButtonText: string = 'Save';
  @Input() cancelButtonText: string = 'Cancel';
  @Input() saveButtonDisabled: boolean = false;
  @Input() formButtonsTemplate: TemplateRef<any> | null | undefined;

  @Input() fieldsHideExpressions: IFieldExpressionDictionary<IGetProductDetailsResponse> | undefined = undefined;
  @Input() fieldsDisableExpressions: IFieldExpressionDictionary<IGetProductDetailsResponse> | undefined = undefined;
  @Input() fieldsRequiredExpressions: IFieldExpressionDictionary<IGetProductDetailsResponse> | undefined = undefined;
  @Input() fieldsPropertyExpressions: IFieldPropertyExpressionDictionary<IGetProductDetailsResponse> | undefined = undefined;
  @Input() fieldsLabelExpressions: IFieldPropertyExpressionDictionary<IGetProductDetailsResponse> | undefined = undefined;

  @Output() save = new EventEmitter<IGetProductDetailsResponse>();
  @Output() cancel = new EventEmitter<void>();
  @Output() buttonClick = new EventEmitter<string>();

            @Input() typeOptions: any[] = [{ value: 0, displayName: `Food` }, { value: 1, displayName: `Drink` }, { value: 2, displayName: `Book` }, { value: 3, displayName: `Car` }];
            @Input() typeOptionsConfiguration: SelectConfiguration = { valueProperty: 'value', labelProperty: 'displayName', sortProperty: 'displayName' };

  _isReadonly: boolean;
  form = new FormGroup({});
  fields: FormlyFieldConfig[] = [];
  private _submitClicks = new Subject<void>();
  private _submitClicksSubscription: Subscription;

  constructor(
    @Inject(LOCALE_ID) private _localeId: string,
    @Optional() @Inject(ENTRY_FIELD_TYPE_RESOLVER) private _fieldTypeResolver: FieldTypeResolver) { }

  ngOnInit(): void {
    this.fields = this.initializeFields();
    this._submitClicksSubscription = this._submitClicks
        .pipe(throttleTime(500))
        .subscribe(() => this.save.emit(this.model));
  }

  ngOnDestroy(): void {
      this._submitClicksSubscription.unsubscribe();
  }

  onSubmit() {
    if (this.form.valid) {
      this._submitClicks.next();
    }
  }

  resolveFieldType = (type: string, isControlReadonly: boolean): string =>
    this._fieldTypeResolver ? this._fieldTypeResolver(type, this.isReadonly || isControlReadonly) : type;

  initializeFields(): FormlyFieldConfig[] {
    return [
        {
        key: 'name',
        type: this.resolveFieldType('input', false),
        focus: false,
className: `entry-name-field entry-input`,
        hideExpression: this.fieldsHideExpressions?.name ?? false,
        expressionProperties: {
        'templateOptions.disabled': (model) => (this.isReadonly || (this.fieldsDisableExpressions?.name ? this.fieldsDisableExpressions.name(model) : false)),
        'templateOptions.required': (model) => (this.fieldsRequiredExpressions?.name ? this.fieldsRequiredExpressions.name(model) : false),
        'templateOptions.label': (model) => (this.fieldsLabelExpressions?.name ? this.fieldsLabelExpressions.name(model) : `Name`),
        'model.name': (model) => (this.fieldsPropertyExpressions?.name ? this.fieldsPropertyExpressions.name(model) : model.name),
        },
        templateOptions: {
        label: `Name`,
        placeholder: `Name`,
        description: ``,
            attributes: {  },
            hidden: !true,
            typeFormatDef: undefined
        },
        },
        {
        key: 'type',
        type: this.resolveFieldType('autocomplete', false),
        focus: false,
className: `entry-type-field entry-autocomplete`,
        hideExpression: this.fieldsHideExpressions?.type ?? false,
        expressionProperties: {
        'templateOptions.disabled': (model) => (this.isReadonly || (this.fieldsDisableExpressions?.type ? this.fieldsDisableExpressions.type(model) : false)),
        'templateOptions.required': (model) => (this.fieldsRequiredExpressions?.type ? this.fieldsRequiredExpressions.type(model) : false),
        'templateOptions.label': (model) => (this.fieldsLabelExpressions?.type ? this.fieldsLabelExpressions.type(model) : `Type`),
        'model.type': (model) => (this.fieldsPropertyExpressions?.type ? this.fieldsPropertyExpressions.type(model) : model.type),
        },
        templateOptions: {
        label: `Type`,
        placeholder: `Type`,
        description: ``,
            options: of(this.typeOptions).pipe(map(opts => sortOptions(opts, this.typeOptionsConfiguration.valueProperty, this.typeOptionsConfiguration.sortProperty, this._localeId))),
            valueProp: this.typeOptionsConfiguration.valueProperty,
            labelProp: this.typeOptionsConfiguration.labelProperty,
            attributes: {  },
            hidden: !true,
            typeFormatDef: undefined
        },
        },
        {
        key: 'description',
        type: this.resolveFieldType('textarea', false),
        focus: false,
className: `entry-description-field entry-textarea`,
        hideExpression: this.fieldsHideExpressions?.description ?? false,
        expressionProperties: {
        'templateOptions.disabled': (model) => (this.isReadonly || (this.fieldsDisableExpressions?.description ? this.fieldsDisableExpressions.description(model) : false)),
        'templateOptions.required': (model) => (this.fieldsRequiredExpressions?.description ? this.fieldsRequiredExpressions.description(model) : false),
        'templateOptions.label': (model) => (this.fieldsLabelExpressions?.description ? this.fieldsLabelExpressions.description(model) : `Description`),
        'model.description': (model) => (this.fieldsPropertyExpressions?.description ? this.fieldsPropertyExpressions.description(model) : model.description),
        },
        templateOptions: {
        label: `Description`,
        placeholder: `Description`,
        description: ``,
            rows: 2,
            cols: 0,
            autosize: false,
            autosizeMinRows: 0,
            autosizeMaxRows: 0,
            attributes: {  },
            hidden: !true,
            typeFormatDef: undefined
        },
        },
        {
        key: 'amount',
        type: this.resolveFieldType('input', false),
        focus: false,
className: `entry-amount-field entry-input`,
        hideExpression: this.fieldsHideExpressions?.amount ?? false,
        expressionProperties: {
        'templateOptions.disabled': (model) => (this.isReadonly || (this.fieldsDisableExpressions?.amount ? this.fieldsDisableExpressions.amount(model) : false)),
        'templateOptions.required': (model) => (this.fieldsRequiredExpressions?.amount ? this.fieldsRequiredExpressions.amount(model) : false),
        'templateOptions.label': (model) => (this.fieldsLabelExpressions?.amount ? this.fieldsLabelExpressions.amount(model) : `Units`),
        'model.amount': (model) => (this.fieldsPropertyExpressions?.amount ? this.fieldsPropertyExpressions.amount(model) : model.amount),
        },
        templateOptions: {
        label: `Units`,
        placeholder: `Units`,
        description: ``,
            attributes: {  },
            hidden: !true,
            typeFormatDef: undefined
        },
        },
        {
        key: 'expiresOn',
        type: this.resolveFieldType('datetimepicker', false),
        focus: false,
className: `entry-expires-on-field entry-datetimepicker`,
        hideExpression: this.fieldsHideExpressions?.expiresOn ?? false,
        expressionProperties: {
        'templateOptions.disabled': (model) => (this.isReadonly || (this.fieldsDisableExpressions?.expiresOn ? this.fieldsDisableExpressions.expiresOn(model) : false)),
        'templateOptions.required': (model) => (this.fieldsRequiredExpressions?.expiresOn ? this.fieldsRequiredExpressions.expiresOn(model) : false),
        'templateOptions.label': (model) => (this.fieldsLabelExpressions?.expiresOn ? this.fieldsLabelExpressions.expiresOn(model) : `Expires on`),
        'model.expiresOn': (model) => (this.fieldsPropertyExpressions?.expiresOn ? this.fieldsPropertyExpressions.expiresOn(model) : model.expiresOn),
        },
        templateOptions: {
        label: `Expires on`,
        placeholder: `Expires on`,
        description: ``,
            attributes: {  },
            hidden: !true,
            typeFormatDef: { name: 'date' }
        },
modelOptions: { updateOn: 'blur' },
        },
        {
        key: 'freeShipping',
        type: this.resolveFieldType('checkbox', false),
        focus: false,
className: `entry-free-shipping-field entry-checkbox`,
defaultValue: true,
        hideExpression: this.fieldsHideExpressions?.freeShipping ?? false,
        expressionProperties: {
        'templateOptions.disabled': (model) => (this.isReadonly || (this.fieldsDisableExpressions?.freeShipping ? this.fieldsDisableExpressions.freeShipping(model) : false)),
        'templateOptions.required': (model) => (this.fieldsRequiredExpressions?.freeShipping ? this.fieldsRequiredExpressions.freeShipping(model) : false),
        'templateOptions.label': (model) => (this.fieldsLabelExpressions?.freeShipping ? this.fieldsLabelExpressions.freeShipping(model) : `Free shipping`),
        'model.freeShipping': (model) => (this.fieldsPropertyExpressions?.freeShipping ? this.fieldsPropertyExpressions.freeShipping(model) : model.freeShipping),
        },
        templateOptions: {
        label: `Free shipping`,
        placeholder: `Free shipping`,
        description: ``,
            attributes: {  },
            hidden: !true,
            typeFormatDef: { name: 'boolean' }
        },
        },
            { key: 'id' },
    
    ];
}

}
