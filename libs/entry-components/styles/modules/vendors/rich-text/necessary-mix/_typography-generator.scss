/* stylelint-disable scss/at-if-no-null */
@use 'sass:map';
@use '@angular/material' as mat;

$redactor-th-selector: 'thead th';

$default-typography: mat.define-typography-config();
$body-typography: map.get($default-typography, 'body-1');
$hero-typography: map.get($default-typography, 'headline-1');
$title-typography: map.get($default-typography, 'subtitle-1');
$caption-typography: map.get($default-typography, 'caption');

@mixin generate-from($theme) {
	$theming-fonts: map.get($theme, 'general', 'fonts');

	.enigmatry-redactor-content {
		.rx-editor, .rx-content, .rx-content p {
			@if $theming-fonts and map.has-key($theming-fonts, 'body') and map.get($theming-fonts, 'body', 'color') != null {
				color: map.get($theming-fonts, 'body', 'color');
			}
			@else {
				color: map.get($body-typography, 'color');
			}

			@if $theming-fonts and map.has-key($theming-fonts, 'body') and map.get($theming-fonts, 'body', 'family') != '' {
				font-family: map.get($theming-fonts, 'body', 'family');
			}
			@else {
				font-family: map.get($body-typography, 'font-family');
			}

			@if $theming-fonts and map.has-key($theming-fonts, 'body') and map.get($theming-fonts, 'body', 'size') != null {
				font-size: map.get($theming-fonts, 'body', 'size');
			}
			@else {
				font-size: map.get($body-typography, 'font-size');
			}

			@if $theming-fonts and map.has-key($theming-fonts, 'body') and map.get($theming-fonts, 'body', 'letter-spacing') != null {
				letter-spacing: map.get($theming-fonts, 'body', 'letter-spacing');
			}
			@else {
				letter-spacing: map.get($body-typography, 'letter-spacing');
			}

			h1, h2, h3, h4 {
				@if $theming-fonts and map.has-key($theming-fonts, 'hero-titles') and map.get($theming-fonts, 'hero-titles', 'family') != '' {
					font-family: map.get($theming-fonts, 'hero-titles', 'family');
				}
				@else {
					font-family: map.get($hero-typography, 'font-family');
				}

				@if $theming-fonts and map.has-key($theming-fonts, 'hero-titles') and map.get($theming-fonts, 'hero-titles', 'letter-spacing') != null {
					letter-spacing: map.get($theming-fonts, 'hero-titles', 'letter-spacing');
				}
				@else {
					letter-spacing: map.get($hero-typography, 'letter-spacing');
				}
			}

			h5, h6 {
				@if $theming-fonts and map.has-key($theming-fonts, 'titles') and map.get($theming-fonts, 'titles', 'family') != '' {
					font-family: map.get($theming-fonts, 'titles', 'family');
				}
				@else {
					font-family: map.get($title-typography, 'font-family');
				}

				@if $theming-fonts and map.has-key($theming-fonts, 'titles') and map.get($theming-fonts, 'titles', 'letter-spacing') != null {
					letter-spacing: map.get($theming-fonts, 'titles', 'letter-spacing');
				}
				@else {
					letter-spacing: map.get($title-typography, 'letter-spacing');
				}
			}

			table, table td, table th {
				@if $theming-fonts and map.has-key($theming-fonts, 'body') and map.get($theming-fonts, 'body', 'size') != null {
					font-size: map.get($theming-fonts, 'body', 'size');
				}
				@else {
					font-size: map.get($body-typography, 'font-size');
				}

				#{$redactor-th-selector} {
					@if map.has-key($theme, 'tables') and map.has-key(map.get($theme, 'tables', 'header'), 'font-size') and map.get($theme, 'tables', 'header', 'font-size') != null {
						font-size: map.get($theme, 'tables', 'header', 'font-size');
					}
					@else {
						font-size: map.get($caption-typography, 'font-size');
					}
				}
			}
		}
	}
}