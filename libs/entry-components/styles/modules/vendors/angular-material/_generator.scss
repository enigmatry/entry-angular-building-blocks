/* stylelint-disable scss/no-duplicate-dollar-variables */
@use '@angular/material' as theming;
@use 'palette-generator';
@use 'typography-generator';
@use 'sass:map';
@use '../../typography/fonts';

/* stylelint-disable scss/function-no-unknown */
@mixin generate-from($entry-theme) {
	@include theming.core();
	$body-font: map.get($entry-theme, 'general', 'fonts', 'body', 'family');

	@if $body-font == '' {
		@include fonts.generate-default-font();
	}

	$primary-palette: theming.define-palette(-get-material-palette-for('primary', $entry-theme));
	$accent-palette: theming.define-palette(-get-material-palette-for('accent', $entry-theme));
	$warn-palette: theming.define-palette(theming.$red-palette);

	$typography: typography-generator.generate-from($entry-theme);
	@include theming.typography-hierarchy($typography);

	$material-theme: theming.define-light-theme((
		color: (
			primary: $primary-palette,
			accent: $accent-palette,
			warn: $warn-palette,
		),
		typography: $typography,
		density: map.get($entry-theme, 'general', 'density')
	));

	@include theming.all-component-themes($material-theme);
}

@function -get-material-palette-for($key, $theme) {
	$palette: map.get($theme, 'general', 'colors', $key + '-theme');

	@if $palette {
		@return $palette;
	}

	$color: map.get($theme, 'general', 'colors', $key);
	@return palette-generator.generate-from($color);
}
