$breakpoints: () !default;

@use 'sass:string';
@use 'sass:map';
@use 'sass:math';
@use 'sass:meta';
@use 'true' as sass-true;
@use '../../modules/variables' as vars;
@forward '../../modules/responsiveness/breakpoints' with (
	$breakpoints: $breakpoints
);
@use '../../modules/responsiveness/breakpoints';
@use 'grid-core';

@if length($breakpoints) == 0 {
	$breakpoints: vars.$default-breakpoints;
}

$column-prefix: 'col-';
$offset-prefix: 'offset-';

@mixin generate($spacing:0, $divisions: 12) {
	@if meta.type-of($spacing) != number {
		@include sass-true.error(
			$message: 'Please provide number parameter! Given value: ' + $spacing,
			$source: 'generate($spacing, $divisions)',
			$catch: vars.$testing
		);
	}
	@else {
		@if ((meta.type-of($divisions) != number) or (($divisions < 2) or ($divisions > 1000))) {
			@include sass-true.error(
				$message: 'Please provide positive number for divisions, between 2 and 1000! Given value: ' + $divisions,
				$source: 'generate($spacing, $divisions)',
				$catch: vars.$testing
			);
		}
		
		@else {
			@include grid-core.generate($column-prefix, $offset-prefix, $spacing);
			@include grid-core.generate-reverse-row($breakpoints);
			@include -unresponsive-grid-from($spacing, $divisions);
			@include -responsive-grid-from($spacing, $divisions);
		}
	}
}

@function -calculate-ratio($counter, $divisions) {
	@return math.div(100% * $counter, $divisions);
}

@mixin -unresponsive-grid-from($spacing, $divisions) {
	$division-limit: $divisions + 1;

	@for $currentIndex from 1 to ($division-limit) {
		$current-ratio: -calculate-ratio($currentIndex, $divisions);

		#{'.' + $column-prefix + $currentIndex} {
			flex: 0 0 auto;
			width: $current-ratio;
			padding: 0 $spacing;
		}

		#{'.' + $offset-prefix + $currentIndex} {
			margin-left: $current-ratio;
		}
	}
}

@mixin -responsive-grid-from($spacing, $divisions) {
	$division-limit: $divisions + 1;
	@each $item, $value in $breakpoints {
		$size: map.get($value, description);

		@include breakpoints.apply-on($item) {
			#{'.' + $column-prefix + $size}-auto {
				flex: 0 0 auto;
				width: auto;
				padding: 0 $spacing;
			}

			@for $currentIndex from 1 to $division-limit {
				$current-ratio: -calculate-ratio($currentIndex, $divisions);
				$size-index-suffix: $size + '-' + $currentIndex;

				#{'.' + $column-prefix + $size-index-suffix} {
					flex: 0 0 auto;
					width: $current-ratio;
				}

				#{'.' + $offset-prefix + $size-index-suffix} {
					margin-left: $current-ratio;
				}
			}
		}
	}
}